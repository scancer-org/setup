---
- name: Install nginx
  become: yes
  apt:
    name=nginx
    state=latest
    update_cache=yes

- name: Setup the default configuration for nginx
  become: yes
  copy:
    src=nginx.conf
    dest=/etc/nginx/nginx.conf
  notify: restart nginx

- name: Create directory to store nginx logs
  become: yes
  file:
    path={{ web_log_dir }}
    state=directory
    owner=www-data
    group=www-data

- name: Delete the default website enabled by nginx
  become: yes
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: restart nginx

- name: Configure firewall rules to allow HTTP(S)
  become: yes
  ufw:
    rule: allow
    name: Nginx Full

- name: Install certbot
  become: yes
  apt:
    name=python3-certbot-nginx
    state=latest
    update_cache=yes
  when: use_certbot

- name: Generate certificates to enable HTTPS
  become: yes
  command:
    "certbot certonly --nginx --non-interactive --agree-tos --email {{ email }} --keep-until-expiring --cert-name {{ domain }} --domain {{ domain }} --domain www.{{ domain }}"
  when: use_certbot

- name: Create a directory to store SSL certificates (when not using certbot)
  become: yes
  file:
    path={{ certificate_dir }}
    state=directory
    owner=root
    group=root
    mode="u=rwx,g=x,o=x"
  when: not use_certbot

- name: Copy over SSL certificates (when not using certbot)
  become: yes
  copy:
    src={{ item }}
    dest={{ certificate_dir }}
  with_fileglob:
    - ssl/*
  when: not use_certbot

- name: Check if Diffie-Hellman key exchange parameters exist (when not using certbot)
  become: yes
  stat:
    path: "{{ ssl_dhparam }}"
  register: dhparam
  when: not use_certbot

- name: Create parameters for Diffie-Hellman key exchange (when not using certbot)
  become: yes
  command:
    "openssl dhparam -out {{ ssl_dhparam }} 4096"
  when: (not use_certbot) and (dhparam.stat.exists == False)

- name: Copy over basic auth password file
  become: yes
  copy:
    src=basic_auth_password
    dest=/etc/nginx/basic_auth_password

- name: Setup this app as one of the available nginx sites
  become: yes
  template:
    src={{ name }}.j2
    dest=/etc/nginx/sites-available/{{ domain }}
  notify: restart nginx

- name: Setup this app as one of the enabled nginx sites
  become: yes
  file:
    src=/etc/nginx/sites-available/{{ domain }}
    dest=/etc/nginx/sites-enabled/{{ domain }}
    state=link
  notify: restart nginx

- name: Add a cron job to renew certificates when close to expiry
  become: yes
  cron:
    name: Renew certificates using certbot
    job: "certbot renew --quiet"
    minute: 15
    hour: 6
  when: use_certbot

- name: Enable the nginx service
  become: yes
  service:
    name=nginx
    enabled=yes
